<apex:page controller="SalesIQ.PSTeamCtlr" sidebar="false" id="page">
    <apex:stylesheet value="{!URLFOR($Resource.SalesIQ__Navigation, '/New_icons/WidgetStyles.css')}"/> 
    <apex:stylesheet value="{!URLFOR($Resource.SalesIQ__jstree, '/jstree/dist/themes/default/style.min.css')}"/>
<!--     <apex:stylesheet value="{!URLFOR($Resource.jstree, '/jstree/libs/jqueryui.min.js')}"/> -->
<!--     <script src="https://code.jquery.com/jquery-1.10.2.js"></script>  -->
<!--     <script src="https://code.jquery.com/ui/1.11.2/jquery-ui.js"></script> -->
    <script src="{!URLFOR($Resource.jstree, '/jstree/dist/jstree.min.js')}"></script>
    <script src="{!URLFOR($Resource.jscolor, '/jscolor/jscolor.js')}"></script>
    
    <script src="{!URLFOR($Resource.jsalert, '/sweetalert/dist/sweetalert-dev.js')}"></script>
    <apex:stylesheet value="{!URLFOR($Resource.SalesIQ__jsalert, '/sweetalert/dist/sweetalert.css')}"/>
    
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js" />
    <apex:includeScript value="https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.17.8/js/jquery.tablesorter.min.js" /> 
    <!----------------------------------------Integration Script code ------ -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <!--The viewport meta tag is used to improve the presentation and behavior of the samples on iOS devices-->
    <meta name="viewport" content="initial-scale=1, maximum-scale=1,user-scalable=no" />
    <link rel="stylesheet" href="https://js.arcgis.com/3.12/dijit/themes/claro/claro.css" />
    <link rel="stylesheet" href="https://js.arcgis.com/3.12/esri/css/esri.css" />
    <script>
      var dojoConfig = { 
        paths: {
          extras: "{!URLFOR($Resource.ClusterLayer,
                  'extras/ClusterLayer')}"
          
           }
      };
    </script>
    
    <style>
   
    .tree1{
        width:265px;
        overflow-y:hidden;
    }
    #tree{
        height: 468px;
        overflow-y: auto;
    }
    
    @charset "UTF-8";
/* CSS Document */

.notes{
    height:25px;
    font-weight:bold;
    text-align:right;
    font-size:12px;
    width:120px !important;
    float:left;
    position:relative;
}

.notes-text-box{
    float:left;
    border:1px solid #333;
    width:180px !important;
    height:22px;
    padding-left: 5px;
}

#legend {
    background-color: #ffffff;
  border-radius: 7px;
  height: 106px;
  left: 118px;
  opacity: 0.75;
  position: absolute;
  right: 1px;
  top: 350px;
  width: 181px;
  z-index: 3;
}

#school {
float: left;
margin-left: 3px;
margin-top: 3px;
max-width: 160px;
}

.circle1 {
    border-radius: 50%;
    display: inline-block;  
    
}

#circle3 {
    height: 14px;
    position: relative;
    width: 14px;    
}

.i_circle{
    height: 18px !important;
    width: 18px !important;
    border-radius: 50%;
    display: inline-block;
    margin-top: 3px !important;
}

.square1 {
    width: 12px !important; 
    height: 12px !important; 
    
}


.diamond1 {
    width: 0;
    height: 0;
    border: 8px solid transparent;
    border-bottom-color: black;
    position: relative;
    top: -8px;
}
.diamond1:after {
    content: '';
    position: absolute;
    left: -8px;
    top: 8px;
    width: 0;
    height: 0;
    border: 8px solid transparent;
    border-top-color: black;
}

.triangle1 {
    width: 0; 
    height: 0; 
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 14px solid black;
}
.container{
    overflow:auto;
    height:250px;
}

.box-main{
    width:100%;
    margin:30px auto;
}

.box-main-popup{
    width:100%;
    margin:-2px auto;
}

.box-popup{
    width:99%;
    margin:0px auto;
    -moz-box-shadow: 0px 0px 10px rgba(0, 0, 0, 1);
    -webkit-box-shadow: 0px 0px 10px rgba(0, 0, 0, 1);
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 1); 
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;            
}

.box-content{
    background-color:#f7f7f7;
    padding:5px;
    border:1px solid #cccccc;
}

.box-content-popup{
    background-color:#fff;
    padding:5px;
    border:1px solid #000;
}

.box-top{
    border-top:3px solid #00335B;
    -moz-border-top:3px solid #00335B;
    -webkit-border-top:3px solid #00335B;
    border-top-left-radius:10px;
    border-top-right-radius:10px;
    -moz-border-top-left-radius:10px;
    -moz-border-top-right-radius:10px;
    -webkit-border-top-left-radius:10px;
    -webkit-border-top-right-radius:10px;
    background-color:#F8F8F8;
    border-left:1px solid #cccccc;
    border-right:1px solid #cccccc;
    color:#000;
    padding:12px 0 0 15px;
    font-weight:600;
    font-size:18px;
    height:30px;
} 

.box-top-popup{
    border-top:3px solid #00335B;
    -moz-border-top:3px solid #00335B;
    -webkit-border-top:3px solid #00335B;
    border-top-left-radius:10px;
    border-top-right-radius:10px;
    -moz-border-top-left-radius:10px;
    -moz-border-top-right-radius:10px;
    -webkit-border-top-left-radius:10px;
    -webkit-border-top-right-radius:10px;
    background-color:#F8F8F8;
    border-left:1px solid #000;
    border-right:1px solid #000;
    color:#000;
    padding:12px 0 0 15px;
    font-weight:600;
    font-size:18px;
    height:30px;
} 

.tablecontent{
    vertical-align:top;
    height:400px;
    background-color:#fff;
    margin-left:250px;
    border:1px solid #989898;
    font-size:12px;
    overflow-y:auto;
}

#map{
    vertical-align:top;
    height:500px;
    background-color:#fff;
    margin-left:250px;
    border:1px solid #989898;
    font-size:12px;
    overflow-y:auto;
}

.box-top-div1{
    font-weight:500;
    font-size:16px;
    float:left;
    height:25px;
    color:#666 !important;
}

.box-top-div1-popup{
    font-weight:600;
    float:left;
    height:25px;
    color:#666 !important;
}

.box-top-div2{
    font-weight:400;
    font-size:12px;
    float:left;
    height:25px;
}

.box-top-div3{
    font-weight:400;
    font-size:12px;
    float:left;
    height:25px;
}

.box-top-div4{
    font-weight:400;
    font-size:12px;
    float:left;
    height:25px;
    text-align:right;
}

.box-top-div5{
    font-size:12px;
    float:right;
    height:25px;
    text-align:right;
    margin-right:3px;
}

.searchbutton1{
    width:80px;
    height:23px;
    font-size:11px !important;
    margin-left:-80px !important;
    border:1px solid #3fa9f5 !important;
    background-color:#55a4da !important;
    z-index:1;
}

.searchtxt1{
    border: 1px solid #3fa9f5;
    border-radius: 5px;
    height: 21px;
    margin-left: 100px;
    padding-top: 0px;
    width: 235px;
}

.button{
   padding:1px 10px !important;
   border:1px solid #3fa9f5 !important;
   font-size:11px !important;
   font-weight:bold !important;
   height:22px !important;
   text-align:right;
}

.tree{
    width:230px;
    vertical-align:top;
    float:left;
    height:500px;
    background-color:#fff;
    border:1px solid #989898;
    overflow-y:auto;
}

.clear{
    clear:both;
}

th{
    color:#fff !important;
    background-color:#277AA8 !important;
    font-size:11.5px !important;
    line-height:20px;
}

.table_header_tree{
    color:#fff !important;
    background-color:#277AA8 !important;
    font-size:12px !important;
    font-weight:bold;
    line-height:30px !important;
    padding-left:12px;
    -webkit-overflow-scrolling: touch;
}

.table_header_main{
    color:#404041 !important;
    background-color:#d1d2d4 !important;
    font-size:16px !important;
    text-align:center;
    line-height:30px !important;
}

td{
    line-height:20px ;
}

.even { 
    background-color: White !important;
}

.odd {
    background-color: #e6f5fc !important; 
}

.number{
    text-align: left;
}

.text{
    text-align:center;
}

.table{
    border:1px solid ;
    line-height:25px !important;
}

.table-side-header{
    margin-left:20px;
    text-align:left;
    font-weight:bold;
}

.pure-table{
    border-collapse:collapse;
    border-spacing:0;
    empty-cells:show;
    border:1px solid #cbcbcb;
}

.pure-table caption{
    color:#000;
    font:italic 85%/1 arial,sans-serif;
    padding:1em 0;
    text-align:center;
}

.pure-table td,.pure-table th{
    border-left:1px solid #cbcbcb;
    border-width:0 0 0 1px;
    font-size:inherit;
    line-height:20px;
    margin:0;
    overflow:visible;
    padding:.25em .50em
}

.pure-table td:first-child,.pure-table th:first-child{
    border-left-width:0;
}

.pure-table thead{
    background:#e0e0e0;
    color:#000;
    text-align:left;
    vertical-align:bottom;
}

.pure-table td{
    background-color:transparent;
}

.pure-table-odd td{
    background-color:#e6f5fc;
}

.pure-table-striped tr:nth-child(2n-1) td{
    background-color:#f2f2f2;
}

.pure-table-bordered td{
    border-bottom:1px solid #cbcbcb;
}

.pure-table-bordered tbody>tr:last-child td,.pure-table-horizontal tbody>tr:last-child td{
    border-bottom-width:0;
}

.pure-table-horizontal td,.pure-table-horizontal th{
    border-width:0 0 1px;
    border-bottom:1px solid #cbcbcb;
}

.pure-table-horizontal tbody>tr:last-child td{
    border-bottom-width:0;
}

span.dynatree-node a{
        font-size :9pt!important ;
}

.wrapper1 .tooltip {
    color: black;
    display: block;
    left: 92px;
    margin-bottom: 15px; 
    opacity: 0;
    padding: 20px;
    pointer-events: none;
    position: absolute;
    -webkit-transform: translateY(10px);
    -moz-transform: translateY(10px);
    -ms-transform: translateY(10px);
    -o-transform: translateY(10px);
    transform: translateY(10px);
    -webkit-transition: all .25s ease-out;
    -moz-transition: all .25s ease-out;
    -ms-transition: all .25s ease-out;
    -o-transition: all .25s ease-out;
    transition: all .25s ease-out;
    -webkit-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);
    -moz-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);
    -ms-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);
    -o-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);
    box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);
}

.link{
    text-decoration:underline;
    color:#0b71be !important;
    font-weight:normal !important;
    padding-right:10px;
}

.datavalue{
    height:300px;
    overflow:auto;
}

.Popup3{
    white-space: nowrap;
    z-index: 0;
    left: 50%;
    top:20%;
    margin-top:-142px;
    position: absolute;
    width: 700px;
    margin-left: -350px;
}

.popup_top_info{
    background-color: #e3e3e3;
    border-bottom: 1px solid #000;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    font-size: 18px;
    height: 34px;
    margin-right: 0;
    margin-top: 0;
    padding: 10px 316px 9px 5px;
}

.popuptaleheader {
    background: none repeat scroll 0 0 #3f99f5;
    border: 1px solid #000;
    color: #fff;
    font-weight: bold;
    text-align: center;
    white-space: nowrap;
}

.popup_message{
    font-size: 14px;
    line-height: 20px;
    padding-left: 3%;
    text-align: left;
    white-space: normal;
}

.popup-td{
    width:90px;
    font-weight:bold;
    color:#5c5d5d;
    text-align:right;
    padding-right:10px;
    height:28px;
}

.popup-textbox{
    width:100px;
    border:1px solid #999;
    height:18px;
}

.popup-button{
    color: white !important;
    margin:5px 5px !important;
    padding:3px 10px !important;
    background: #36647D !important; 
}

.popupBackground{
    background-color:black;
    opacity: 0.20;
    filter: alpha(opacity = 20);
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 0;
}

#navToolbar{
    top:42px !important;
    right:16px !important;
    opacity:1 !important;
}

.checkbox{
    border:1px solid #999;
    margin-right:10px;
}

.custPopup{
 
   
   
    z-index: 9999;
    left: 50%;
    position: absolute;
    /* These are the 3 css properties you will need to change so the popup 
    displays in the center of the screen. First set the width. Then set 
    margin-left to negative half of what the width is. You can add 
    the height property for a fixed size pop up if you want.*/
    width: 500px;
    margin-left: -250px;
    top:100px;
}

#color{
    width: 20%;
}

.popup{
    z-index: 9999;
    left: 50%;
    position: absolute;
    width: 500px;
    margin-left: -250px;
    top:10%;
}

.popupBg{
    background-color:black;
    opacity: 0.20;
    filter: alpha(opacity = 70);
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 9998;
}

.circle{
    height: 15px !important;
    width: 15px !important;
    border-radius: 50%;
    display: inline-block;
    margin-top:5px !important;
    //opacity: 0.75;
}

.square{
    height: 15px !important;
    width: 15px !important;
    //border-radius: 50%;
    display: inline-block;
    margin-top:5px !important;
    //opacity: 0.75;
}

th.tablesorter-header{ 
    cursor: pointer; 
    font-weight: bold; 
    background-repeat: no-repeat; 
    background-position: center left; 
    padding-left: 20px; 
    border-right: 1px solid #dad9c7; 
    margin-left: -1px; 
}

th.tablesorter-headerDesc{ 
    background-color: #3399FF; 
}

th.tablesorter-headerAsc { 
    background-color: #3399FF; 
}

#main-div{
    width:100%;
    height:100%;
}

.container{
    overflow:auto;
    height:250px;
}

.content-div{
    width:100%;
    height:50%;
}

.impact-div{
    width:50%;
    height:100%;
    float:left;
}

.impacts{
    width:100%;
    height:50%;
}

.impact-table-header{
    width:100%;
    height:25px;
    font-size:1.2em;
    font-weight:bold;
    font-family:arial;
    color:#FFFFFF;
    background-color:#1797C0;
}

.page-block-table{
    overflow:scroll;
}
    
    
    
    </style>
   
    <!------- ---------------------------------jstree starts here -------->
    <script>
      //insert code 1
        var clickedNode;
        var $j = jQuery.noConflict();
        $j(function(){
            $j("#posPbTableNew").tablesorter({sortList: [[0,0]]});
        });

       window.callLoadAccounts = function(offset){
            console.log($j('#tree').jstree('get_selected'));
            console.log('----offset---');
            console.log(offset);
            loadAccounts($j('#tree').jstree('get_selected')[0], offset);
        }
		window.clearFilterAndLoadAccounts = function(offset){
            var ss = $j("#slStr").val('');
            callLoadAccounts(offset);
        }

        //insert code 2
        window.loadAccounts= function(value, offset){  
            var ss = $j("#slStr").val();
            console.log('ss');
            console.log(ss);
            console.log(offset);
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.PSTeamCtlr.getMapData}',value, ss, offset,function(result, event){
                    console.log('== getMapData : Result ===');
                    console.log(result);
                    if(result != null){
                    if(result.posAccountsData.length !=0)
                    {     console.log("New Extents");
                          console.log(result.posAccountsData.length)
                          getExtentvalues(result.extents);
                    }
                        getAccounts(result.posAccountsData);
                        receivedaccountsdata=result.posAccountsData;
                        if(offset <= 0){
                            console.log('inside');
                            refreshlistview(value,ss,offset);
                        }
                        console.log('outside'+offset);
                    }
                    // pster= result.psTerritories;
                    nodevalue= value;
                    window.createClusters(result.psTerritories,result.territories);
                    //ter= result.territories;
                    //window.createClusters("acLayer",result.territories);
            });
        }

        var appendSorting = function(){
            console.log($j("#posPbTableNew"));
            $j("#posPbTableNew").tablesorter();
            $j('.currency').each(function(){
                $j(this).text(format($j(this).text(), "$"));
            });
            $j('.number').each(function(){
                $j(this).text(format($j(this).text(), ""));
            });
        }

        $j(function(){
            console.log("js tree started"); 
            jsString = {!JsonString};

            createStyleClass = function(arr){
                for(key in arr){
                    if(arr[key].isFolder == true){
                        createStyleClass(arr[key].children);
                    }else{
                        $j("<style type='text/css'> ."+arr[key].terid+"{background-color:RGB("+arr[key].R+","+arr[key].G+","+arr[key].B+") !important} </style>").appendTo("head");
                    }
                }
            }
            createStyleClass(jsString);

            $j('#tree').jstree({
                "core" : {
                    "theme" : {
                        "variant" : "small"
                    },
                    "data" : jsString,
                    "animation" : 800
                },
                "checkbox" : {
                    "keep_selected_style" : false,
                    'check_callback' : true
                },
                                
                "types" : {
                               "default" : {
                                  "icon" : ''
                                 }
                 },
                "plugins" : ["no-checkbox","types"]
            });
            //$j('#tree').jstree('select_node', '00Eo0000000dW4VEAU');
            $j('#tree').jstree('select_node', '{!roleId}');
            //console.log("-- role id -- ");
            //console.log("{!roleId}");
            console.log($j('#tree').jstree('get_selected'));
            loadAccounts("{!roleId}", 0);
            clickedNode = '';
            console.log('clickedNode---------' + clickedNode);
            $j('#tree').bind("select_node.jstree", function(e, data){
                //$j('#tree').jstree('select_node', data.node.id);
                console.log("data.node.text " +data.node.id);
                console.log(data.node);
                console.log('clickedNode----inside-----' + clickedNode);
                map.removeAllLayers();
                map.addLayer(basemap);
                acLayer.clear();
                psLayer.clear();
                map.addLayer(acLayer);
                map.addLayer(psLayer);
                concatAccount='';
                receivedaccountsdata=[];
                loadAccounts(data.node.id, 0);
                clickedNode = data.node.id;
                console.log('---Node Id----');
                console.log(clickedNode);
            });
        });

        
    </script>
    <!------- --------------------------------jstree ends here ------ -->

    <!------- ---------------------------------Arc GIS related Script code ------ -->
    <script src="https://js.arcgis.com/3.12/"></script>
    <script>
        //-----------------------------------    diclaration   ----------------------------
        var map;
        var wgs;             
        var layerdefs =[];
        var visibleLayerIds = [0,1];
        var x_min;
        var x_max;
        var y_min;
        var y_max;
        var graphic;
        var layerURL;
        var layerOptions;
        var layer;
        var extent1;
        var imageParameters;
        var clusterLayer;
        var queryTask, query;
        var jsString = {};
        var inputInfo = {};
        var receivedaccountsdata= new Array; 
        var accounts = new Array;
        var cluster_accounts = new Array;
        //var independent_account = new Array;
        var terr= new Array;
        var count =0;
        var currenvalue;
        var basemap;
        var basemapURL;
        var style;
        var concatAccount ='';
        var current_icon;
        var current_District;
        var initColor = "#ce641d";
        var colorPicker;
        var symbol_0;
        var billabe_index;
        var renderer;
        var symbolshape,symbolsize, symboltransparency,outlinetransparency;
        var acco1 = {};
        var ter;
        var nodevalue;
        var terrcolor;
        var icon_path;
        var psLayer, acLayer;
        
        window.getExtentvalues=function(results){
                  if(results!=null)
                  {  
                    x_min = parseFloat(results.xmin);
                    y_min = parseFloat(results.ymin);
                    x_max = parseFloat(results.xmax);
                    y_max = parseFloat(results.ymax);
                    //console.log("Inside Extents values");                                     
                    //console.log(extent1);
                  }
                   
        }
        
        window.getAccounts=function(acc){
            receivedaccountsdata = acc;
            console.log("receivedaccountsdata");
            console.log(receivedaccountsdata);
            var ccount=0;
            for(var i=0; i<receivedaccountsdata.length; i++){
               
                if(receivedaccountsdata[i].isLocked == true){
                    console.log(receivedaccountsdata[i]);   
                    ccount++;
                }
            }
            if(ccount==0){
                console.log("No Account available");
            }
        }
 
        require(["esri/map",
                "esri/request",
                "esri/layers/FeatureLayer",
                "esri/layers/ArcGISTiledMapServiceLayer",
                "esri/dijit/Legend", 
                "dojo/_base/array", 
                "dojo/parser", 
                "dijit/layout/BorderContainer", 
                "dijit/layout/ContentPane", 
                "dijit/layout/AccordionContainer", 
                "esri/symbols/SimpleLineSymbol", 
                "esri/symbols/SimpleFillSymbol", 
                "esri/symbols/SimpleMarkerSymbol",
                "esri/symbols/PictureMarkerSymbol",
                "esri/symbols/TextSymbol", 
                "esri/renderers/SimpleRenderer", 
                "esri/layers/LabelLayer", 
                "dojo/_base/Color",
                "dojo/ready", 
                "esri/geometry/Extent",
                "esri/graphic", 
                "esri/geometry/Point",
                "esri/geometry/webMercatorUtils",
                "extras",
                "esri/lang", 
                "dojo/number", 
                "dojo/dom-style", 
                "dijit/TooltipDialog", 
                "dijit/popup",
                "esri/toolbars/navigation", 
                "esri/SpatialReference",
                "dijit/form/Button", 
                "dijit/Toolbar", 
                "esri/toolbars/draw", 
                "dojo/dom", 
                "esri/symbols/CartographicLineSymbol", 
                "dojo/on", 
                "esri/tasks/query",
                "esri/tasks/QueryTask", 
                "esri/renderers/ClassBreaksRenderer",
                "esri/layers/GraphicsLayer",
                "esri/layers/ArcGISDynamicMapServiceLayer", 
                "esri/layers/ImageParameters", 
                "esri/dijit/HomeButton", 
                "dojox/layout/ScrollPane", 
                "dojo/dom-attr",
                "dijit/registry",
                "esri/dijit/PopupTemplate",
                "dojo/domReady!"
                ], function(
                Map, 
                esriRequest,
                FeatureLayer, 
                ArcGISTiledMapServiceLayer,
                Legend, 
                arrayUtils, 
                parser, 
                BorderContainer, 
                ContentPane, 
                AccordionContainer, 
                SimpleLineSymbol, 
                SimpleFillSymbol, 
                SimpleMarkerSymbol,
                PictureMarkerSymbol,
                TextSymbol, 
                SimpleRenderer, 
                LabelLayer, 
                Color,
                ready, 
                Extent,
                Graphic,
                Point, 
                webMercatorUtils,
                ClusterLayer,
                esriLang, 
                number, 
                domStyle, 
                TooltipDialog, 
                dijitPopup, 
                Navigation, 
                SpatialReference,
                Button, 
                Toolbar, 
                Draw, 
                dom, 
                CartographicLineSymbol, 
                on , 
                Query,
                QueryTask,
                ClassBreaksRenderer,
                GraphicsLayer,
                ArcGISDynamicMapServiceLayer, 
                ImageParameters, 
                HomeButton,
                ScrollPane, 
                attr,
                registry,
                PopupTemplate
            ){
            
       ready(function(){
                parser.parse();
                var loading = dojo.byId("page:form_id:loadingImg");  //loading image. id
                //-------------------------------  Extents Calculation ----------------    
                x_min = -97.291105806;
                x_max = -70.402078194;
                y_max = 44.2509326;
                y_min = 23.6208594;
                extent1 = new esri.geometry.Extent({ "xmin": parseFloat(x_min), "ymin": parseFloat(y_min), "xmax": parseFloat(x_max), "ymax": parseFloat(y_max) },new esri.SpatialReference({wkid:4326}));
                
                var result1= new Array;
                var result2= new Array;
                var r;
                var g;
                var b;
             
                //-----------------------------------    Map Code    ------------------------ 
                map = new Map("map", { 
                    basemap: "national-geographic",
                    //center: [-93.5, 41.431],
                    //zoom: 5
                    spatialReference: [4326],
                    extent: extent1
                }); 
                basemapURL = "https://server.arcgisonline.com/arcgis/rest/services/NatGeo_World_Map/MapServer";
                basemap = new esri.layers.ArcGISTiledMapServiceLayer(basemapURL);
                //map.addLayer(basemap);

                imageParameters = new ImageParameters();
                imageParameters.layerIds = [0];
                imageParameters.layerOption = ImageParameters.LAYER_OPTION_SHOW;

                map.on("load", Map_load_activate);
                map.on("update-start", showLoading);
                map.on("update-end", hideLoading);

                //----------------------------------------- Graphics Layer ----------------------------------------
                psLayer = new GraphicsLayer({});
                acLayer = new GraphicsLayer({});

                //Featurelayer selection symbol
                var highlightSymbol;
                
                function Map_load_activate(evt){
                    initToolbar();
                };
                
                function showLoading() {
                    console.log("ShowLoding")
                    esri.show(loading);
                    map.hideZoomSlider();
                }

                function hideLoading(error) {
                    console.log("HideLoding")
                    esri.hide(loading);
                    map.showZoomSlider();
                }

                //----------------------------------   Home button ---------------------------------------
                var homebut = new HomeButton({
                    map: map,
                    extent: extent1, // (optional) Use this exent instead of map extent. default: map extent
                    visible: true
                }, "homebut");
                homebut.startup();

                //-----------------------------------Navigation Toolbor ----------------------------
                try{
                    navToolbar = new Navigation(map);
                    //console.log("registry : " + registry.toSource())
                    registry.byId("zoomprev").set("disabled", true);
                    registry.byId("zoomnext").set("disabled", true);
                    registry.byId("zoomprev").set("class", "prevOff");
                    registry.byId("zoomnext").set("class", "nextOff");

                    on(registry.byId("zoomprev"), "click", function () { 
                        tb.deactivate();
                        navToolbar.zoomToPrevExtent(); 
                    });

                    on(registry.byId("zoomnext"), "click", function () { 
                        tb.deactivate(); 
                        navToolbar.zoomToNextExtent();
                    });

                    on(registry.byId("pan"), "click",  function(){
                        tb.deactivate(); 
                        registry.byId("pan").set("disabled", true);
                        registry.byId("pan").set("class","panOff");
                        map.setMapCursor("url({!URLFOR($Resource.pan)}),pointer");
                        //map.setMapCursor("pointer")
                        navToolbar.activate(esri.toolbars.Navigation.PAN);
                        map.enableDoubleClickZoom();
                        map.enableScrollWheelZoom();
                        if (map.infoWindow.isShowing) { map.infoWindow.hide(); }
                        
                        if(registry.byId("zoomout").get("disabled")){
                            registry.byId("zoomout").set("disabled", false);
                            registry.byId("zoomout").set("class","zoomoutOn");
                        }

                        if(registry.byId("select_multi").get("disabled")){
                            registry.byId("select_multi").set("disabled", false);
                            registry.byId("select_multi").set("class","selectmultiOn");
                        }

                        if(registry.byId("zoomin").get("disabled")){
                            registry.byId("zoomin").set("disabled", false);
                            registry.byId("zoomin").set("class","zoominOn");
                        }
                    });

                    on(registry.byId("zoomin"), "click", function (){
                        tb.deactivate(); 
                        registry.byId("zoomin").set("disabled", true);
                        registry.byId("zoomin").set("class","zoominOff");
                        map.setMapCursor("url({!URLFOR($Resource.zoom_in_cur)}),pointer")
                        navToolbar.activate(esri.toolbars.Navigation.ZOOM_IN);
                        if(registry.byId("pan").get("disabled")){
                            registry.byId("pan").set("disabled", false);
                            registry.byId("pan").set("class","panOn");
                        }

                        if(registry.byId("zoomout").get("disabled")){
                            registry.byId("zoomout").set("disabled", false);
                            registry.byId("zoomout").set("class","zoomoutOn");
                        }

                        if(registry.byId("select_multi").get("disabled")){
                            registry.byId("select_multi").set("disabled", false);
                            registry.byId("select_multi").set("class","selectmultiOn");
                        }
                    });

                    on(registry.byId("zoomout"), "click", function (){
                        tb.deactivate(); 
                        registry.byId("zoomout").set("disabled", true);
                        registry.byId("zoomout").set("class","zoomoutOff");
                        map.setMapCursor("url({!URLFOR($Resource.zoom_out_cur)}),pointer")
                        navToolbar.activate(navToolbar.activate(esri.toolbars.Navigation.ZOOM_OUT));
                        if(registry.byId("pan").get("disabled")){
                            registry.byId("pan").set("disabled",false);
                            registry.byId("pan").set("class","panOn");
                        }

                        if(registry.byId("zoomin").get("disabled")){
                            registry.byId("zoomin").set("disabled", false);
                            registry.byId("zoomin").set("class","zoominOn");
                        }

                        if(registry.byId("select_multi").get("disabled")){
                            registry.byId("select_multi").set("disabled", false);
                            registry.byId("select_multi").set("class","selectmultiOn");
                        }
                    });

                    map.on("extent-change", function (evt) {
                        //alert("extent-change")
                        registry.byId("zoomprev").set("disabled", navToolbar.isFirstExtent());
                        registry.byId("zoomnext").set("disabled", navToolbar.isLastExtent());
                        if(registry.byId("zoomprev").get("disabled")) {
                            registry.byId("zoomprev").set("class", "prevOff");
                        }else{ registry.byId("zoomprev").set("class", "prevOn"); }
                        if(registry.byId("zoomnext").get("disabled")) {
                            registry.byId("zoomnext").set("class", "nextOff");
                        }else{ registry.byId("zoomnext").set("class", "nextOn"); }
                        if (map.infoWindow.isShowing) { map.infoWindow.hide(); }
                    });
                }catch(err){
                    console.log("err_nav : " + err)
                }

                function cleanUp() {
                    navToolbar.deactivate();
                    map.setMapCursor("pointer")
                    closeDialog();
                    clusterLayer.clearSingles();
                }
                // lineSymbol used for freehand polyline, polyline and line. 
                var lineSymbol = new CartographicLineSymbol(
                    CartographicLineSymbol.STYLE_SOLID,
                    new Color([255,0,0]), 5, 
                    CartographicLineSymbol.CAP_ROUND,
                    CartographicLineSymbol.JOIN_MITER, 5
                );

                function initToolbar(){
                    try{
                        tb = new Draw(map);
                        tb.on("draw-end", addGraphic);
                        on(dom.byId("select_multi"), "click", function(evt) {
                            registry.byId("select_multi").set("disabled", true);
                            registry.byId("select_multi").set("class","selectmultiOff");
                            console.log ("In_init");
                            map.setMapCursor("pointer")
                            console.log("Select multi Accounts");
                            navToolbar.deactivate();
                            map.disableMapNavigation();
                            tb.activate(esri.toolbars.Draw.FREEHAND_POLYGON);
                        });

                        on(dom.byId("clear_sel"), "click", Clearselection);
                    }catch(err){"Init_err : " + err};
                }
                function Clearselection(){
                    clearSelectedAccounts();
                    tb.deactivate(); 
                    navToolbar.deactivate();

                    map.setMapCursor("pointer");
                    dojo.forEach(psLayer.graphics,function(graphic){
                      
                           var symbol = graphic.symbol;
                           symbol.outline.width = 1;
                           symbol.outline.color.r =0;
                           symbol.outline.color.g =0;
                           symbol.outline.color.b =0;
                           symbol.outline.color.a =0.5;
                           graphic.setSymbol(symbol);
                       
                   });
                   dojo.forEach(acLayer.graphics,function(graphic){
                      
                           var symbol = graphic.symbol;
                           symbol.outline.width = 1;
                           symbol.outline.color.r =0;
                           symbol.outline.color.g =0;
                           symbol.outline.color.b =0;
                           symbol.outline.color.a =0.5;
                           graphic.setSymbol(symbol);
                       
                   });
                    if(registry.byId("pan").get("disabled")){
                        registry.byId("pan").set("disabled",false);
                        registry.byId("pan").set("class","panOn");
                    }

                    if(registry.byId("zoomin").get("disabled")){
                        registry.byId("zoomin").set("disabled", false);
                        registry.byId("zoomin").set("class","zoominOn");
                    }

                    if(registry.byId("zoomout").get("disabled")){
                        registry.byId("zoomout").set("disabled", false);
                        registry.byId("zoomout").set("class","zoomoutOn");
                    }

                    if(registry.byId("select_multi").get("disabled")){
                        registry.byId("select_multi").set("disabled", false);
                        registry.byId("select_multi").set("class","selectmultiOn");
                    }
                    navToolbar.activate(esri.toolbars.Navigation.PAN);
                    map.enableDoubleClickZoom();
                    map.enableScrollWheelZoom();
                }

                function addGraphic(evt) {
                    try{
                        //deactivate the toolbar and clear existing graphics
                        console.log("Inside Add graphic"); 
                                              
                      var acc_ids ='';
                      dojo.forEach(psLayer.graphics,function(graphic){
                      if (evt.geometry.contains(graphic.geometry)) {
                      if(graphic.attributes.LockStatus!=true)
                      {
                       highlightSymbol= graphic.symbol;
                       highlightSymbol.outline.color.r= 0; 
                       highlightSymbol.outline.color.g= 255; 
                       highlightSymbol.outline.color.b= 255; 
                       highlightSymbol.outline.color.a= 1;
                       highlightSymbol.outline.width= 3; 
                        graphic.setSymbol(highlightSymbol);
                        
                        acc_ids += graphic.attributes.SFDC_ID + ",";
                      }
                      }
                     
                     
                    });
                        
                     acc_ids = acc_ids.substr(0, acc_ids.length -1)
                      console.log("acc_ids");
                      console.log(acc_ids);    
                      updateWrapperOnSelection(acc_ids);
                    }catch(err){console.log("Add_graphic : " + err)}
                }
                
            
        
               createClusters= function(psTerr,acTerr){
                    var r=null;
                    var g=null;
                    var b=null;
                    extent1 = new esri.geometry.Extent({ "xmin": parseFloat(x_min), "ymin": parseFloat(y_min), "xmax": parseFloat(x_max), "ymax": parseFloat(y_max) },new esri.SpatialReference({wkid:4326}));
                    map.setExtent(extent1, true);
                    psLayer.clear();
                    acLayer.clear();
                    count=0;
                    showLoading();
                    console.log("psTerr");
                    console.log(psTerr.length);
                    console.log("acTerr");
                    console.log(acTerr.length);
                if(psTerr.length!=0)
                {
                    for(var s=0; s<psTerr.length ; s++){
                        accounts =[];                 
                        r= psTerr[s].psRVal;
                        g= psTerr[s].psGVal;
                        b= psTerr[s].psBVal;

                        for(k=0; k<receivedaccountsdata.length; k++){
 
                             if(receivedaccountsdata[k].psTerId== psTerr[s].psTerrId)
                             {
                                //console.log("Receivedaccount" + k);
                                //console.log(receivedaccountsdata[k]);
                                accounts.push(receivedaccountsdata[k]);
                               
                             }
                            
                         
                            concatAccount += "'" + receivedaccountsdata[k].accId + "',";
                            
                        }
                        

                                         
                        addAccountFeatureSetToMap(accounts,psTerr[s].psTerrId,r,g,b,"psLayer");
                        count++;
                        currentnode = nodevalue;
                    }
                 }
                 
                 if(acTerr.length!=0)   
                 {
                    for(var s=0; s<acTerr.length ; s++){
                        accounts =[];                 
                        r= acTerr[s].rVal;
                        g= acTerr[s].gVal;
                        b= acTerr[s].bVal;
                        console.log("for acTerritories");
                        for(k=0; k<receivedaccountsdata.length; k++){
                               
                             
                             if(receivedaccountsdata[k].terId== acTerr[s].TerrId)
                             {
                                console.log("Receivedaccount" + k);
                                console.log(receivedaccountsdata[k]);
                                accounts.push(receivedaccountsdata[k]);
                               
                             }
                            
                         
                            concatAccount += "'" + receivedaccountsdata[k].accId + "',";
                            
                        }
                        

                                         
                        addAccountFeatureSetToMap(accounts,acTerr[s].terrId,r,g,b,"acLayer");
                        count++;
                        currentnode = nodevalue;
                    }
                  }
                    concatAccount = concatAccount.substr(0, concatAccount.length -1);
                    $j('#tree').jstree('open_node', nodevalue);
                    hideLoading();
                }
                
                 window.addAccountFeatureSetToMap = function(accountsdata,ter1,r,g,b,layerType) {
                       wgs = new SpatialReference({
                                "wkid": 4326
                            });
                    
                    
                    inputInfo.data = arrayUtils.map(accountsdata,function(feature){
                                //console.log("feature");
                                //console.log(feature);
                                var latlng = new  Point(parseFloat(feature.longitude), parseFloat(feature.latitude), wgs);
                                var webMercator = webMercatorUtils.geographicToWebMercator(latlng);
                                attributes = {
                                    "Name": feature.accountName,
                                    "SFDC_ID": feature.accId,
                                    "LockStatus":feature.isLocked,
                                    "ProspectStatus":feature.isProspect,
                                    "Account_id": feature.atcDealerId,
                                    "Territory_ID": feature.terId,
                                    "Territory_name": feature.territoryName,
                                    "AdverConsultant":feature.adverConsultant,
                                    "psTerrName":feature.psTerrName,
                                    "ps":feature.ps,
                                };
                                return {  
                                    "x": webMercator.x,  
                                    "y": webMercator.y,
                                    "latlng" : latlng,
                                    "attributes": attributes  
                                };  
                            });
                            
                    //popupTemplate to work with attributes specific to this dataset
                               var popupTemplate = PopupTemplate({
                                "title": "Account Information",
                                "fieldInfos": [{
                                    "fieldName": "Name",
                                    "label": "Name",
                                    visible: true
                                }, {
                                    "fieldName": "Account_id",
                                    "label": "Account Id",
                                    visible: true
                                }, {
                                    "fieldName": "Territory_name",
                                    "label": "Territory Name",
                                    visible: true
                                }, {
                                    "fieldName": "Territory_ID",
                                    "label": "Territory ID",
                                    visible: true
                                }, {
                                    "fieldName": "AdverConsultant",
                                    "label": "AdverConsultant",
                                    visible: true
                                }, {
                                    "fieldName": "psTerrName",
                                    "label": "PS Territory",
                                    visible: true
                                }, {
                                    "fieldName": "ps",
                                    "label": "Product Specialist",
                                    visible: true
                                }]
                            });
               if(layerType == "psLayer")
               {  //console.log("Inside psLayer");
                  dojo.forEach(inputInfo.data, function(feature){
                      //console.log("Features");
                      //console.log(feature);
                    var rVal, gVal,bVal;
                    rVal=r; gVal=g; bVal=b;
                     symbolsize =30;
                     symboltransparency=1;
                     outlinetransparency = 1;
                     icon_path = "M4.834,4.834L4.833,4.833c-5.889,5.892-5.89,15.443,0.001,21.334s15.44,5.888,21.33-0.002c5.891-5.891,5.893-15.44,0.002-21.33C20.275-1.056,10.725-1.056,4.834,4.834zM25.459,5.542c0.833,0.836,1.523,1.757,2.104,2.726l-4.08,4.08c-0.418-1.062-1.053-2.06-1.912-2.918c-0.859-0.859-1.857-1.494-2.92-1.913l4.08-4.08C23.7,4.018,24.622,4.709,25.459,5.542zM10.139,20.862c-2.958-2.968-2.959-7.758-0.001-10.725c2.966-2.957,7.756-2.957,10.725,0c2.954,2.965,2.955,7.757-0.001,10.724C17.896,23.819,13.104,23.817,10.139,20.862zM5.542,25.459c-0.833-0.837-1.524-1.759-2.105-2.728l4.081-4.081c0.418,1.063,1.055,2.06,1.914,2.919c0.858,0.859,1.855,1.494,2.917,1.913l-4.081,4.081C7.299,26.982,6.379,26.292,5.542,25.459zM8.268,3.435l4.082,4.082C11.288,7.935,10.29,8.571,9.43,9.43c-0.858,0.859-1.494,1.855-1.912,2.918L3.436,8.267c0.58-0.969,1.271-1.89,2.105-2.727C6.377,4.707,7.299,4.016,8.268,3.435zM22.732,27.563l-4.082-4.082c1.062-0.418,2.061-1.053,2.919-1.912c0.859-0.859,1.495-1.857,1.913-2.92l4.082,4.082c-0.58,0.969-1.271,1.891-2.105,2.728C24.623,26.292,23.701,26.983,22.732,27.563z";
                     symbol_0 = new SimpleMarkerSymbol(
                                SimpleMarkerSymbol.STYLE_PATH, 
                                symbolsize, 
                                new SimpleLineSymbol(
                                    SimpleLineSymbol.STYLE_SOLID, 
                                    new Color([0, 0, 0, outlinetransparency]), 
                                    0.5
                                ), new Color([rVal, gVal, bVal, symboltransparency]));
                     symbol_0.setPath(icon_path);
                
                     psLayer.add(new esri.Graphic(feature.latlng, symbol_0, feature.attributes, popupTemplate));
                     
                     
                    
                    });
                    map.addLayer(psLayer); 
               }
               
               
               if(layerType == "acLayer")
               {  //console.log("Inside acLayer");
                  dojo.forEach(inputInfo.data, function(feature){
                      //console.log("Features");
                      //console.log(feature);
                    var rVal, gVal,bVal;
                    rVal=r; gVal=g; bVal=b;
                     symbolsize =14;
                     symboltransparency=1;
                     outlinetransparency = 1;      
                     symbol_0 = new SimpleMarkerSymbol(
                                SimpleMarkerSymbol.STYLE_CIRCLE, 
                                symbolsize, 
                                new SimpleLineSymbol(
                                    SimpleLineSymbol.STYLE_SOLID, 
                                    new Color([0, 0, 0, outlinetransparency]), 
                                    0.5
                                ), new Color([rVal, gVal, bVal, symboltransparency]));
                
                     acLayer.add(new esri.Graphic(feature.latlng, symbol_0, feature.attributes, popupTemplate));
                     
                     
                    
                    });
                    map.addLayer(acLayer); 
               }
             }
                
                window.accountsSelection = function(val,tg){
                    console.log("Checked ACTerritory");
                    
                    map.reorderLayer(acLayer,1);
                    map.reorderLayer(psLayer,2);
                    
                    
                    console.log(val);
                    console.log(tg);
                    
                    /*tg.previousSibling.innerHTML = 2;
                    if(tg.checked){
                        tg.previousSibling.innerHTML = 0;
                    }else if(!tg.checked){
                        tg.previousSibling.innerHTML = 1;
                    }*/
                    console.log(acLayer);
                    dojo.forEach(acLayer.graphics,function(graphic){
                       console.log(graphic);
                        if(graphic.attributes.Territory_ID == val){
                            
                            if(tg.checked == true && graphic.attributes.Territory_ID==val){
                                console.log(val);
                                highlightSymbol= graphic.symbol;
                                highlightSymbol.outline.color.r= 0; 
                                highlightSymbol.outline.color.g= 255; 
                                highlightSymbol.outline.color.b= 255; 
                                highlightSymbol.outline.color.a= 1;
                                highlightSymbol.outline.width= 3; 
                                graphic.setSymbol(highlightSymbol);
                            }

                            if(tg.checked == false){
                                highlightSymbol= graphic.symbol;
                                highlightSymbol.outline.width = 1;
                                highlightSymbol.outline.color.r =0;
                                highlightSymbol.outline.color.g =0;
                                highlightSymbol.outline.color.b =0;
                                highlightSymbol.outline.color.a =0.5;
                                graphic.setSymbol(highlightSymbol);
                                return;
                            }
                            return;
                        }
                    });
                   // $(tg).parents("table").trigger("update");
                   //accountsLayer.refresh();
                }

                window.deactivateLasso = function(){
                   console.log("Deactivated");
                  // tb.deactivate();
                }
            });
            
      });      
            function showLayers()
            {
               console.log("Inside ShowLayers");
               if(document.getElementById("acLayer").checked == true)
               {    
                         acLayer.show();       
                               
               }
               else if(document.getElementById("acLayer").checked == false)
               {    
                         acLayer.hide();      
               }
               if(document.getElementById("psLayer").checked == true)
               {    
                         psLayer.show();        
                               
               }
               else if(document.getElementById("psLayer").checked == false)
               {    
                         psLayer.hide();      
               }
            
            }
            
           function passSelectedPS(position){
                 
                   //alert(position);
                   document.getElementById("page:form_id:input4").value =  position;
                   refresh();
                 }
           
           function passSelectedTeam(position){
                 
                   //alert(position);
                   document.getElementById("page:form_id:input5").value =  position;
                   refresh();
                 }
           
           
           function refreshTree(){
                    $j("#tree").jstree(true).redraw(true);
                    console.log('Inside Refresh Tree');
           }     

            function testResult(){
                console.log('In test Result');
            };
    </script>
    
    <!------- ---------------------------------Arc GIS related Script code Ends here ------ -->
    <apex:form id="form_id" >
        <apex:actionStatus id="myStatus" style="z-index:999999;" >
            <apex:facet name="start" >
                <div >
                    <div class="popupBackground" ></div>
                    <div class="PopupPanel" style="z-index:2000">
                        <table border="0" width="100%" height="100%">
                            <tr>
                                <td align="center"><b>Please Wait</b></td>
                            </tr>
                            <tr>
                                <td align="center"><img src="/img/loading.gif"/></td>
                            </tr>
                        </table>
                    </div>
                </div>
            </apex:facet>
        </apex:actionStatus> 
        
        <div style="padding-left:40%;">
                         <input  checked="true" type="checkbox" name="AcLayer"
                                        id="acLayer" class="checkbox" onclick="showLayers()" />
                         <label for="acLayer" class="legends_text">ACLayer</label>
                         <input  checked="true" type="checkbox" name="PsLayer"
                                        id="psLayer" class="checkbox" onclick="showLayers()" />
                          <label  for="psLayer" class="legends_text">PSLayer</label>
                          &nbsp;&nbsp;<b><apex:outputLabel >Team:</apex:outputLabel></b>
                             &nbsp;<apex:selectlist size="1" id="PSMTeamList" value="{!defaultPSTeam}" disabled="{!if(isHoAdmin,false,true)}" styleclass="notes-text-box3">
                                <apex:selectOptions value="{!teamList}"/>  
                                <apex:actionsupport event="onchange" 
                                    rerender="form_id" action="{!reloadPSTeamPage}"/> 
                            </apex:selectlist>
        </div>
        
        <!--          Main Table with Map and Territory Start Here    -->
        <div class="box-main" style="margin-top:1px;">
            <apex:outputText value="No more request allowed in this quarter" rendered="{!NOT(isSubmissionAllowed)}" style="color:blue; font-size:15px; font-weight:bold;"/>
            
            <div class="box-content">  
                <!--         Tree Start From Here    -->
                <div class="tree" >
                        <div class="table_header_tree">PS Territory Organization</div>
                        <div id="tree" >
                       </div>
                    
                </div>
                <!--         Tree Ends From Here    -->
                <!--          Map Start From Here    -->
                <div id="map" dojotype="dijit.layout.ContentPane" region="center">
                    <apex:image id="loadingImg" url="{!$Resource.SalesIQ__loading}" style="position:absolute; right:412px; top:256px; z-index:100;" />
                    <div id="navToolbar"  dojoType="dijit.Toolbar">
                        <table border="0">
                            <tr>
                                <td>
                                    <span  title="Default Extent" id="homebut"  ></span>
                                    <button data-dojo-type="dijit/form/Button" title="Pan" id="pan" type="button" />
                                    <button dojoType="dijit/form/Button" title="Zoom In" id="zoomin" type="button"/>
                                    <button dojoType="dijit/form/Button" title="Zoom Out" id="zoomout" type="button" />
                                    <button data-dojo-type="dijit/form/Button" title="Previous View" id="zoomprev" type="button" />
                                    <button data-dojo-type="dijit/form/Button" title="Next View" id="zoomnext" type="button" />
                                    <button  data-dojo-type="dijit/form/Button" title="Select Multiple Accounts" id="select_multi" type="button" />
                                    <button data-dojo-type="dijit/form/Button" title="Clear Selection" id="clear_sel" type="button" />
                                </td>
                            </tr>
                        </table>
                        
                  <!--      
                     <div id="legend">  
                   <div id="school">  
                  <table  border="0" >
                       <tr>
                         <td><div id= "circle3" class="circle1"  style="background: rgb(0,0,0);"></div></td>
                         <td><span style="vertical-align: top;"><b>Paying Independent </b></span></td>
                       </tr>
                       <tr>
                         <td><div class="square1"  style="background: rgb(0,0,0);"></div></td>
                         <td><span style="vertical-align: top;"><b>Paying Franchise </b></span></td>
                       </tr>
                       
                        <tr>
                         <td><div class="diamond1"></div></td>
                         <td><span style="vertical-align: top;"><b>Prospect Franchise </b></span></td>
                       </tr> 
                       
                       <tr>
                         <td><div class="triangle1"></div></td>
                         <td><span style="vertical-align: top;"><b>Prospect Independent </b></span></td>
                       </tr>
                       
                     </table>    
                     </div>
                      </div>   -->
                    </div>
                </div>
                <!--         Map Ends Here    --> 
            </div>
            <!--          Main Table with Map and Territory Ends Here    -->

            <!--          Content Starts Here    -->
            
            <apex:pageBlock mode="maindetail" id="pageBlk">
            	<outputPanel id="msgPanel" >
                	<apex:pageMessages id="pageMessage" rendered="{!!(nameNotChanged || NameBlank) }"/>
                </outputPanel>
                <div class="box-main">
                    <div class="box-top">
                  <div class="box-top-div1" style="width:20%">
                        <apex:outputPanel id="headerName"><apex:outputText ><b>{!psTerName}</b></apex:outputText></apex:outputPanel>
                  </div> 
                    <div class="box-top-div2" style="padding-right:5px ; width:20%;">
                    <apex:outputPanel id="buttonPnl">
                        <apex:commandButton value="Previous" action="{!goPreviousPage}" disabled="{!buttonDisalbePrev}" rerender="tableContainer, buttonPnl" oncomplete="callLoadAccounts({!offset});" status="myStatus"/>
                        &nbsp;&nbsp;&nbsp;&nbsp;showing : {!start + 1} - {!stop} of {!total}&nbsp;&nbsp;&nbsp;&nbsp;
                        <apex:commandButton value="Next" action="{!goNextPage}"  disabled="{!buttonDisalbeNext}" rerender="tableContainer, buttonPnl" oncomplete="callLoadAccounts({!offset});" status="myStatus"/>
                    </apex:outputPanel>
                        
                    </div>
                    <div class="box-top-div3" style="padding-right:5px;">
                    <input type="text" id="slStr" />
                        <apex:commandButton onclick="callLoadAccounts(0);" rerender="tableContainer, buttonPnl,pageMessage, headerName" value="Search" status="myStatus"/> 
                        <apex:commandButton onclick="clearFilterAndLoadAccounts(0);" rerender="tableContainer, buttonPnl,pageMessage" value="Clear" status="myStatus"/>
                    </div>
                    <apex:outputPanel id="allButtons">
                    <div class="box-top-div5" style="width:35%;"> 
                             <apex:commandButton value="Create PS Territory"
                             		action="{!createPSTerritory}"
                           			status="myStatus" 
                           			rerender="popupCreate,pageMessage" 
                           			rendered="{!if(isHoAdmin==true||isDirector==true,true,false)}"
                           			disabled="{!if(terType=='Director'|| terType=='Territory',true,false)}"/> 
                             <apex:commandButton action="{!deletePSTerritory}" 
                             		value="Delete PS Territory" 
                             		status="myStatus" 
                             		rendered="{!if(isHoAdmin==true||isDirector==true,true,false)}"
                             		rerender="popupDelete,pageMessage"
                             		disabled="{!if(terType=='Director'|| terType=='Manager',true,false)}"/>  
                             <apex:commandButton value="Move AC Territories"
                             	    action="{!showPopup}"
                             	    status="myStatus" 
                             	    rerender="popup,pageMessage"/> 
                             <apex:commandbutton value="Change Name" 
                             		status="myStatus"
		                            action="{!changeTerritoryName}" 
		                            reRender="popupRename,pageMessage"
		                            disabled="{!if(terType=='Director'|| terType=='Territory',true,false)}"/>
		                            &nbsp;&nbsp;
		              </div>   
		              </apex:outputPanel>            
                </div>
                    <div class="box-content">
                    <!-- <apex:pageMessages id="pageMessage" /> -->
                    <apex:outputPanel layout="block" styleClass="container" id="tableContainer">
                        <table id="posPbTableNew" width="100%" class="tablesorter">
                            <thead>
                            <tr>
                                <th>Action</th>
                                <th>AC Territory</th>
                                <th>Advertising Consultant</th>
                                <th>PS Territory</th>
                                <th>Product Specialist</th>
                                <th># of Paying Accounts</th>
                                <th># of Prospect Accounts</th>
                            </tr>
                            </thead>
                            <tbody>
                            <apex:repeat value="{!acTerritoriesLimited}" var="posNew">
                                <tr>
                                    <td>
                                        <apex:outputpanel rendered="{!NOT(posNew.isLocked)}">
<!--                                         <span >{!IF(posNew.isSelected, 0, 1)}</span> -->
                                        <apex:inputCheckbox value="{!posNew.isSelected}" rendered="{!NOT(posNew.isLocked)}" onChange="accountsSelection('{!posNew.TerrId}',this)"/>
                                        </apex:outputpanel>
                                    </td>
                                    <td><div id= "circle3" class="circle1" style="background: rgb({!posNew.rVal},{!posNew.gVal},{!posNew.bVal});"></div>&nbsp;&nbsp;{!posNew.TerrName}
                                    
                                    </td>
                                    <td>{!posNew.advertisingConsultant}</td>
                                    <td>{!posNew.psTerritory}</td>
                                    <td>{!posNew.productSpecialist}</td>
                                    <td><span class="number">{!posNew.noOfPaying}</span></td>
                                    <td><span class="number">{!posNew.noOfProspect}</span></td>
                                </tr>
                            </apex:repeat>
                            </tbody>
                        </table>
                    </apex:outputPanel>
                   </div>
                    </div>
                    </apex:pageBlock>
           
           
           <!-- Move AC Territories PopUp Starts -->
            <div id="pop-up-box">
                <apex:outputPanel id="popup">
                    <apex:outputPanel styleClass="popupBg" layout="block" rendered="{!displayPopUp}"/>
                    <apex:outputPanel styleClass="popup" layout="block" rendered="{!displayPopUp}">
                        <div class="box-main-popup">
                        <div class="box-top-popup">
                            <div class="box-top-div1-popup">Select Destination Territory</div> </div>
                            <div class="box-content-popup">
                                <apex:pageMessages id="popUpMessage" />
                                <table width="100%" border="0" cellspacing="10" cellpadding="0">
                                    <tr>
                                        <td class="notes">Teams :</td>
                                        <td>
                                            <apex:selectList size="1" multiselect="false" value="{!selPSMTeam}" label="Teams :" styleClass="notes-text-box"  disabled="{!if(isManager,true,false)}">
                                                <apex:selectOptions value="{!teams}" />
                                                <apex:actionSupport event="onchange" action="{!TerritoriesForTeams}" rerender="territoriesList" status="loadingImage"/>
                                            </apex:selectList>
                                            <apex:actionStatus id="loadingImage">
                                                <apex:facet name="start" >
                                                    <img src="/img/loading.gif" style="padding-left: 6px; padding-top: 4px;"/>
                                                </apex:facet>
                                            </apex:actionStatus>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="notes">Territories :</td>
                                        <td>
                                            <apex:selectList size="1" multiselect="false" value="{!selectTerr}" id="territoriesList" label="Territories :" styleClass="notes-text-box">
                                                <apex:selectOptions value="{!terrOption}" />
                                                <!-- <apex:actionSupport event="onchange" rerender="selBtn" status="tImage" action="{!activateBtn}"/>-->
                                            </apex:selectList>
                                            <apex:actionStatus id="tImage">
                                                <apex:facet name="start" >
                                                    <img src="/img/loading.gif" style="padding-left: 6px; padding-top: 4px;"/>
                                                </apex:facet>
                                            </apex:actionStatus>
                                        </td>
                                    </tr>
                                    <tr>   
                                    <td class="notes"><apex:outputlabel value="Effective Start Date" /></td>
                                    <td><apex:selectList value="{!effectiveDate}"
                                            styleClass="notes-text-box1" size="1">
                                            <apex:selectOptions value="{!StartDates}" />
                                        </apex:selectList></td>
                                  </tr>
                                  
                                    <tr><td colspan="2">&nbsp;</td></tr>
                                    <tr>
                                        <td colspan="2" style="text-align:center">
<!--                                             <apex:commandButton value="Select" action="{!analyseSelectedData}" style="background:#36647D;color: #FFF; width:100px; height:25px; font-size:12px;" id="selBtn" disabled="{!telSel}"/> -->
                                            
                                            <apex:actionStatus id="goMoveTer" >
				                                    <apex:facet name="stop">
				                                        <apex:outputPanel >
				                                            <apex:commandButton value="Move" 
				                                            action="{!moveACTerritory}" 
				                                            rerender="thePBasd,pageMessage,pop-up-box,popup,pageBlk,pagemessage" 
				                                            style="background:#36647D;color: #FFF; width:100px; height:25px; font-size:12px; margin-left:6px;" 
				                                            status="goMoveTer"/>
                                            
				                                			&nbsp;&nbsp;
				                                			<apex:commandButton value="Close" 
				                                			action="{!closePopup}" 
				                                			rerender="popup" 
				                                			style="background:#36647D;color: #FFF; width:100px; height:25px; font-size:12px; margin-left:6px;" 
				                                			status="goMoveTer"/>
                                            
				                                        </apex:outputPanel>
				                                    </apex:facet>
				                                    <apex:facet name="start">
				                                        <apex:outputPanel >
				                                            <apex:commandButton value="Processing..." disabled="true"
				                                                style="background:#36647D;color: #FFF; width:80px; height:25px; font-size:12px;"
				                                                rerender="thePBasd,pageMessage,pop-up-box,popup,pageBlk,pagemessage" />
				                                &nbsp;&nbsp;
				                                <apex:commandButton value="Processing..." disabled="true"
				                                                style="background:#36647D;color: #FFF; width:80px; height:25px; font-size:12px;"
				                                                rerender="popup" />
				                                        </apex:outputPanel>
				                                    </apex:facet>
			                                </apex:actionStatus>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </apex:outputPanel>
            </apex:outputPanel>
           
           
<!-- Move AC Territories PopUp Ends -->
            
            
        </div>
            <!--          Content Ends Here    -->
            <apex:actionfunction rerender="buttonPnl, pagemessage, tableContainer,headerName,allButtons" name="refreshlistview" action="{!PositionAccountsOnMapSelect}"  status="myStatus"> <!-- oncomplete="appendSorting();" -->
                <apex:param name="accountsData" assignTo="{!accountsDataFromMap}" value="clickedNode"/>
                <apex:param name="searchStr" assignTo="{!searchString}" value="searchString"/>
                <apex:param name="offset" assignTo="{!offset}" value="offset"/>
            </apex:actionfunction>
            <apex:actionfunction rerender="pageBlk,pagemessage" name="updateWrapperOnSelection" action="{!updateWrapperOnSelect}" status="myStatus" oncomplete="appendSorting();">
                <apex:param name="accountIds" assignTo="{!selectedAccountIds}" value="clickedNode"/>
            </apex:actionfunction>
            <apex:actionfunction rerender="pageBlk,pagemessage" name="clearSelectedAccounts" action="{!clearAllAccounts}" status="myStatus" oncomplete="appendSorting();"></apex:actionfunction>
        </div>
        
        <apex:inputhidden id="input4" value="{!selectedTerPos}" />
<!--         <apex:inputhidden id="input5" value="{!selPSMTeam}" />      -->
      
      
      

<!-----------------------Pop Up Create Territory Starts------------------->

        <apex:outputPanel id="popupCreate">
             <apex:outputPanel styleClass="popupBackground" layout="block" rendered="{!displayPopUpCreate}" />
                <apex:outputPanel styleClass="custPopup" layout="block" rendered="{!displayPopUpCreate}">
                    <div class="box-main-popup">
                        <div class="box-top-popup">
                            <div class="box-top-div1">Create PS Territory</div>
                        </div>
                   
                   <div class="box-content-popup">
                        <apex:pageMessages id="popupMsg" />
                        <apex:pageblock mode="maindetail">
                            <table width="600" border="0" cellspacing="10" cellpadding="0">
                                <tr>
                                    <td class="notes"><apex:outputlabel value="PS Territory ID" /></td>
                                    <td><apex:inputText value="{!newPSTerritoryId}"
                                            styleClass="notes-text-box" disabled="true"/></td>
                                </tr>   
                                <tr>
                                    <td class="notes"><apex:outputlabel value="PS Territory Name" /></td>
                                    <td><apex:inputText value="{!newPSTerritoryName}"
                                            styleClass="notes-text-box" /></td>
                                </tr>  
                                  <tr>  
                                    <td class="notes"><apex:outputlabel value="Comments" /></td>
                                    <td><apex:inputText value="{!comments}"
                                            styleClass="notes-text-box" /></td>
                                 </tr>   
                                    
                                 <tr>   
                                    <td class="notes"><apex:outputlabel value="Effective Start Date" /></td>
                                    <td><apex:selectList value="{!effectiveDate}"
                                            styleClass="notes-text-box1" size="1">
                                            <apex:selectOptions value="{!StartDates}" />
                                        </apex:selectList></td>
                                  </tr>
                            </table>
                        </apex:pageblock>
                      <div style="text-align:center">
                      <apex:outputPanel id="panelbutton" rendered="{!if(isexception==false,true,false)}">
                            <apex:commandButton value="Save" style="background:#36647D;color: #FFF; width:70px; height:25px; font-size:12px;"  action="{!showMessage}" rerender="popupCreate,popupCon"
                                rendered="{!if(showAnothersave==0,true,false)}"
                                 />

                            <apex:commandButton value="Cancel"
                                style="background:#36647D;color: #FFF; width:70px; height:25px; font-size:12px;"
                                action="{!closePopup}" rerender="popupCreate,myMsg"
                               
                                rendered="{!if(showAnothersave==0,true,false)}" />

                            <apex:actionStatus id="go"
                                rendered="{!if(showAnothersave==1,true,false)}">
                                <apex:facet name="stop">
                                    <apex:outputPanel >
                                        <apex:commandButton value="Save"
                                            style="background:#36647D;color: #FFF; width:70px; height:25px; font-size:12px;"
                                            action="{!saveTerritory}" status="go" disabled="false"
                                            rerender="go,popupCreate,popupCon,thePBasd,pageMessage, buttonPnl" />

                                        <apex:commandButton value="Cancel"
                                            style="background:#36647D;color: #FFF; width:70px; height:25px; font-size:12px;"
                                            action="{!closePopup}" rerender="popupCreate,myMsg"/>
                                    </apex:outputPanel>
                                </apex:facet>
                                <apex:facet name="start">
                                    <apex:outputPanel >
                                        <apex:commandButton style="background:#36647D;color: #FFF; width:90px; height:25px; font-size:12px;"
                                            value="Processing..." disabled="true"
                                            rerender="go,popupCreate,thePBasd"/>

                                        <apex:commandButton style="background:#36647D;color: #FFF; width:90px; height:25px; font-size:12px;"
                                            value="Processing..." disabled="true"
                                            rerender="popupCreate,myMsg" />
                                   </apex:outputPanel>
                                </apex:facet>
                            </apex:actionStatus>
                     </apex:outputPanel> 
                     </div>
                       </div> 
                         </div> 
                            
                     
                         
                           </apex:outputPanel>
                </apex:outputPanel>  
 <!-----------------------Pop Up Create Territory Ends------------------->                
                
    <!-- -----------PS Pop Up To Delete Territory---------------- -->
      
        <apex:outputPanel id="popupDelete">
            <apex:outputPanel styleClass="popupBackground" layout="block"
                rendered="{!(displayDeleteAll )}" />
            <apex:outputPanel styleClass="custPopup" layout="block"
                rendered="{!(displayDeleteAll )}">
                <div class="box-main-popup" style="margin-top: -2px;">
                    <div class="box-top-popup">
                        <div class="box-top-div1">Delete PS Territory</div>
                    </div>
                    <div class="box-content-popup">

                        <br />
                        <apex:pageMessages id="delMsg" />
                        <!-- ------------Display this panel when there is either of User or Accounts are assigned to the territory------------- -->
                        <apex:outputPanel id="pan1"
                            rendered="{!(hasAccounts || hasUser)}">
                            <div style="text-align: center">
                                
                                <apex:outputText id="p1" rendered="{!!confirmUnassign}">Kindly perform below action before deleting <b>"{!selectedPSTerrName}"</b>
                                </apex:outputText>
                                <br />
                                <apex:outputPanel id="allexist"
                                    rendered="{!(hasAccounts && hasUser)}">
                                    <apex:image id="img1" value="{!$Resource.SalesIQ__redIcon}" width="13"
                                        height="13" /> Un-Assign PS<br />
                                    <apex:image id="img2" value="{!$Resource.SalesIQ__redIcon}" width="13"
                                        height="13" /> Un-Assign AC Territories <br />
                                 </apex:outputPanel>
                                <apex:outputPanel id="noUser" rendered="{!(hasUser&&!hasAccounts)}">
                                    <apex:image id="img3" value="{!$Resource.SalesIQ__redIcon}" width="13"
                                        height="13" /> Un-Assign PS <br />
                                </apex:outputPanel>
                                <apex:outputPanel id="noAccounts" rendered="{!(hasAccounts&&!hasUser)}">
                                    <apex:image id="img5" value="{!$Resource.SalesIQ__redIcon}" width="13"
                                        height="13" /> Un-Assign AC Territories<br />
                                </apex:outputPanel>
                                <br />
                            </div>
                            <br />
                            <br />
                            <div style="text-align: center">
                                <apex:commandButton value="Close"
                                    style="background:#36647D;color: #FFF; width:90px; height:25px; font-size:12px;"
                                    action="{!closePopup}" rerender="popupDelete,thePBasd,myMsg" />
                            </div> 
                            <br />

                        </apex:outputPanel>



                        <!-- --------------------Display this panel when there is no User/Accounts assigned to the territory--------------------- -->
                        <apex:outputPanel id="pan4"
                            rendered="{!!(hasAccounts || hasUser)}">
                            <div style="text-align: center;">
                                There are no User/Accounts assigned to the territory <b>"{!selectedPSTerrName}"</b>.
                                <br />Are you sure you want to delete the territory?
                            </div>
                            <br />
                            <div style="text-align: center">
                                <apex:actionStatus id="goDeleteTerritory" onstop="appendSorting();">
                                    <apex:facet name="stop">
                                        <apex:outputPanel >
                                            <apex:commandButton value="Delete"
                                                style="background:#36647D;color: #FFF; width:80px; height:25px; font-size:12px;"
                                                action="{!deletePSTerritoryRequest}"
                                                rerender="popupDelete,scriptPanel,thePBasd,myMsg,msgPnl,treePanel,delMsg, pageMessage"
                                                status="goDeleteTerritory" oncomplete="refreshTree();"/>
                                &nbsp;&nbsp;
                                <apex:commandButton value="Cancel"
                                                style="background:#36647D;color: #FFF; width:80px; height:25px; font-size:12px;"
                                                action="{!closePopup}" rerender="popupDelete,thePBasd,myMsg" />
                                        </apex:outputPanel>
                                    </apex:facet>
                                    <apex:facet name="start">
                                        <apex:outputPanel >
                                            <apex:commandButton value="Processing..." disabled="true"
                                                style="background:#36647D;color: #FFF; width:80px; height:25px; font-size:12px;"
                                                rerender="popupDelete,thePBasd,myMsg,msgPnl" />
                                &nbsp;&nbsp;
                                <apex:commandButton value="Processing..." disabled="true"
                                                style="background:#36647D;color: #FFF; width:80px; height:25px; font-size:12px;"
                                                rerender="popupDelete,thePBasd,myMsg" />
                                        </apex:outputPanel>
                                    </apex:facet>
                                </apex:actionStatus>

                            </div>
                            <br />
                        </apex:outputPanel>

                        <br />
                        <!---------------------Display this panel after unassigning AC from a territory where no accounts were assigned------------------- -->
<!--                         <apex:outputPanel id="pan5" rendered="{!unAssignedPS}"> -->
<!--                             <div style="text-align: center"> -->
<!--                                 <apex:outputText id="pa" rendered="{!confirmUnassign}">"{!userToUnassign}" is Un-Assigned from "{!selectedPSTerrName}".</apex:outputText> -->


<!--                                 <br /> -->
<!--                             </div> -->
<!--                             <br /> -->
<!--                             <br /> -->
<!--                             <div style="text-align: center"> -->

<!--                                 <apex:commandButton value="Cancel" -->
<!--                                     style="background:#36647D;color: #FFF; width:90px; height:20px; font-size:12px;" -->
<!--                                     action="{!closePopup}" rerender="popupDelete,thePBasd,myMsg" /> -->
<!--                             </div> -->
<!--                             <br /> -->

<!--                         </apex:outputPanel> -->
                    </div>
                </div>

            </apex:outputPanel>
         </apex:outputPanel>    
         
         <!-- PopUp Rename territory Starts here -->
         
        <apex:outputPanel id="popupRename">
             <apex:outputPanel styleClass="popupBackground" layout="block" rendered="{!displayRenamePopUp}" />
                <apex:outputPanel styleClass="custPopup" layout="block" rendered="{!displayRenamePopUp}">
                   <div class="box-main" style="margin-top: -2px;">
                    <div class="box-top">

                        <div class="box-top-div1">Rename PS Territory</div>
                    </div>
                    <div class="box-content-popup">
                        <apex:pageMessages id="editMsg" />
                        <apex:pageblock mode="maindetail">
                            <apex:pageblocktable value="{!lstPSTerritories}" var="ps">
                                <apex:column headervalue="PS Territory ID">
                                    {!ps.psTerritoryId}
                                </apex:column>
                                <apex:column headervalue="PS Territory Name">
                                     <apex:inputtext value="{!ps.psTerrName}" disabled="false" />
                                </apex:column>
                                <apex:column headerValue="PS Team">
                                    {!ps.psTeam}
                                </apex:column>
                            </apex:pageblocktable>
                        </apex:pageblock>
                        <br />
                        <!--                             <div style="text-align:center" ><apex:commandButton value="Confirm" style="background:#36647D;color: #FFF; width:100px; height:20px; font-size:12px;" action="{!editAccount}" rerender="popupEdit,thePBasd,editMsg" oncomplete="appendSorting();"/> -->
                        <div style="text-align: center">
                            <apex:actionStatus id="go2">
                                <apex:facet name="stop">
                                    <apex:outputPanel >
                                        <apex:commandButton value="Confirm" status="go2"
                                            style="background:#36647D;color: #FFF; width:100px; height:20px; font-size:12px;"
                                            action="{!saveTerName}"
                                            rerender="popupRename,popupEdit,thePBasd,editMsg,go2,myMsg,MsgPnl,pageBlk" />

                                        <apex:commandButton value="Cancel" status="go2"
                                            style="background:#36647D;color: #FFF; width:90px; height:20px; font-size:12px;"
                                            action="{!closePopup}" rerender="popupRename,popupEdit,thePBasd,myMsg,pageBlk" />
                                    </apex:outputPanel>
                                </apex:facet>
                                <apex:facet name="start">
                                    <apex:outputPanel >
                                        <apex:commandButton style="background:#36647D;color: #FFF; width:120px; height:20px; font-size:12px;"
                                            value="Processing..." disabled="true"
                                            rerender="popupRename,popupEdit,thePBasd,editMsg,go2,myMsg,MsgPnl,pageBlk" />

                                        <apex:commandButton value="Processing..." disabled="true"
                                            style="background:#36647D;color: #FFF; width:120px; height:20px; font-size:12px;" rerender="popupRename,popupEdit,thePBasd,myMsg,pageBlk" />
                                    </apex:outputPanel>
                                </apex:facet>
                            </apex:actionStatus>

                        </div>
                        <br />
                    </div>

                </div>
                           </apex:outputPanel>
                </apex:outputPanel>  
                
      <!--PopUp Rename Territory Ends Here -->
               
 
    </apex:form>
     
   
    <script>
    var format = function(numStr, prefix){
        var str = numStr, parts = false, output = [], i = 1, formatted = null;
        if(str.indexOf(".") > 0) {
            parts = str.split(".");
            str = parts[0];
        }
        str = str.split("").reverse();
        for(var j = 0, len = str.length; j < len; j++) {
            if(str[j] != ",") {
                output.push(str[j]);
                if(i%3 == 0 && j < (len - 1)) {
                    output.push(",");
                }
                i++;
            }
        }
        formatted = output.reverse().join("");
        return(prefix + formatted);
    };
    </script>
</apex:page>